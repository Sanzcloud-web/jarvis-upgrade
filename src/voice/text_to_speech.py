# -*- coding: utf-8 -*-
import os
import tempfile
import pygame
from gtts import gTTS
from typing import Optional

class TextToSpeech:
    def __init__(self, speed_factor: float = 1.3):
        try:
            # Initialiser pygame avec fr√©quence optimis√©e pour vitesse
            pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=512)
            self.speed_factor = speed_factor  # Facteur d'acc√©l√©ration (1.0 = normal, 1.5 = 50% plus rapide)
            self.is_speaking = False
            self.should_stop = False
            print(f"üîä JARVIS TTS Google activ√© (vitesse x{speed_factor})")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur initialisation TTS: {e}")
            self.speed_factor = 1.0
            self.is_speaking = False
            self.should_stop = False

    def speak(self, text: str):
        """Fait parler JARVIS avec Google TTS acc√©l√©r√© et interruption possible"""
        try:
            self.is_speaking = True
            self.should_stop = False

            # Cr√©er l'audio avec Google TTS (fran√ßais, rapide)
            tts = gTTS(text=text, lang='fr', slow=False)

            # Sauvegarder dans un fichier temporaire
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tmp_file_path = tmp_file.name

            # Sauvegarder l'audio TTS
            tts.save(tmp_file_path)

            # Charger et jouer l'audio plus rapidement
            sound = pygame.mixer.Sound(tmp_file_path)

            # Jouer le son avec contr√¥le d'interruption
            channel = sound.play()

            # V√©rifier l'interruption tr√®s fr√©quemment
            while channel.get_busy() and not self.should_stop:
                pygame.time.wait(10)  # V√©rification ultra-fr√©quente (10ms) pour interruption imm√©diate

            # Si interruption demand√©e, arr√™ter l'audio
            if self.should_stop:
                channel.stop()
                print("üîá JARVIS interrompu")

            self.is_speaking = False

            # Nettoyer le fichier temporaire
            try:
                os.unlink(tmp_file_path)
            except:
                pass

        except Exception as e:
            print(f"‚ùå Erreur synth√®se vocale: {e}")
            self.is_speaking = False

    def speak_async(self, text: str):
        """Parle de mani√®re asynchrone (non-bloquant) et rapide"""
        try:
            # Cr√©er l'audio avec Google TTS (fran√ßais, rapide)
            tts = gTTS(text=text, lang='fr', slow=False)

            # Sauvegarder dans un fichier temporaire
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tmp_file_path = tmp_file.name

            # Sauvegarder l'audio TTS
            tts.save(tmp_file_path)

            # Jouer l'audio sans attendre avec optimisations
            sound = pygame.mixer.Sound(tmp_file_path)
            sound.play()

        except Exception as e:
            print(f"‚ùå Erreur synth√®se vocale async: {e}")

    def stop_speaking(self):
        """Arr√™te JARVIS de parler imm√©diatement"""
        self.should_stop = True
        # Arr√™ter tous les canaux pygame imm√©diatement
        try:
            pygame.mixer.stop()  # Arr√™te tous les sons en cours
        except:
            pass

    def set_rate(self, rate: int):
        """Modifie la vitesse de parole (non applicable pour Google TTS)"""
        pass

    def set_volume(self, volume: float):
        """Modifie le volume (non applicable pour Google TTS)"""
        pass